from datetime import datetime
import csv
from collections import namedtuple

LogEntry = namedtuple('LogEntry', ['date', 'time', 'log_type', 'description', 'user_id'])

class StepTracker:
    def __init__(self):
        self.steps_per_day = {}
        self.steps_per_week = {}
        self.steps_per_month = {}

    def get_week_key(self, date):
        dt = datetime.strptime(date, "%Y-%m-%d")
        year, week, _ = dt.isocalendar()
        return (year, week)

    def add_steps(self, date, steps):
        if date in self.steps_per_day:
            self.steps_per_day[date] += steps
        else:
            self.steps_per_day[date] = steps

        week_key = self.get_week_key(date)
        month_key = date[:7]
        self.steps_per_week[week_key] = self.steps_per_week.get(week_key, 0) + steps
        self.steps_per_month[month_key] = self.steps_per_month.get(month_key, 0) + steps

    def convert_steps_to_km(self, steps):
        return steps * 0.000762

    def motivate(self, steps):
        if steps < 5000:
            return "Делай делай делай!"
        elif steps < 10000:
            return "Кип ап зе гуд ворк!"
        else:
            return "Ну, это уже результат!"

    def display_stats(self):
        for date, steps in self.steps_per_day.items():
            km = self.convert_steps_to_km(steps)
            print(f"Дата: {date}, Шаги: {steps}, Км: {km:.2f}, {self.motivate(steps)}")

class Logger:
    def __init__(self):
        self.logs = []

    def add_log(self, date, time, log_type, description, user_id):
        log_entry = LogEntry(date, time, log_type, description, user_id)
        self.logs.append(log_entry)

    def display_logs(self):
        for log in self.logs:
            print(f"{log.date} {log.time} - {log.log_type}: {log.description} (User: {log.user_id})")

    def find_logs_by_date(self, date):
        return [log for log in self.logs if log.date == date]

    def filter_logs_by_type(self, log_type):
        return [log for log in self.logs if log.log_type == log_type]

    def update_log(self, user_id, new_description):
        for i, log in enumerate(self.logs):
            if log.user_id == user_id:
                self.logs[i] = log._replace(description=new_description)

    def delete_log(self, user_id):
        self.logs = [log for log in self.logs if log.user_id != user_id]

    def sort_logs(self):
        self.logs.sort(key=lambda x: (x.date, x.time))

    def export_logs_to_file(self, filename):
        with open(filename, 'w', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(['date', 'time', 'log_type', 'description', 'user_id'])
            for log in self.logs:
                writer.writerow([log.date, log.time, log.log_type, log.description, log.user_id])

    def import_logs_from_file(self, filename):
        self.logs = []
        with open(filename, 'r') as f:
            reader = csv.reader(f)
            next(reader)
            for row in reader:
                if len(row) == 5:
                    try:
                        date, time, log_type, description, user_id = row
                        self.add_log(date, time, log_type, description, int(user_id))
                    except ValueError:
                        print(f"Неверный user_id: {row}")
                else:
                    print(f"Неверная запись лога: {row}")

tracker = StepTracker()
tracker.add_steps("2023-04-01", 3000)
tracker.add_steps("2023-04-02", 8000)
tracker.add_steps("2023-04-03", 12000)
tracker.add_steps("2023-04-01", 2000)

tracker.display_stats()

logger = Logger()
logger.add_log("2023-04-01", "12:00", "INFO", "Система запущена", 12345)
logger.add_log("2023-04-01", "12:05", "ERROR", "Ошибка подключения", 12346)
logger.add_log("2023-04-02", "13:15", "ERROR", "Ошибка подключения", 12347)
logger.add_log("2023-04-03", "12:30", "INFO", "Система выключена", 12348)

logger.display_logs()

print("Логи по дате:")
print(logger.find_logs_by_date("2023-04-01"))

print("Логи по типу:")
print(logger.filter_logs_by_type("ERROR"))

logger.update_log(12345, "Система успешно перезапущена")

logger.delete_log(12346)

logger.sort_logs()
logger.display_logs()

logger.export_logs_to_file('logs.txt')
logger.import_logs_from_file('logs.txt')
logger.display_logs()
